{"version":3,"file":"app.js","sources":["../src/components/Renderer.ts","../../src/math/Vector3.ts","../../src/MeshSimplifiers/FastQuadric/structs/Triangle.ts","../../src/math/SymmetricMatrix.ts","../../src/MeshSimplifiers/FastQuadric/structs/Vertex.ts","../../src/MeshSimplifiers/FastQuadric/structs/Ref.ts","../../src/math/Face3.ts","../../src/util/Timer.ts","../../src/MeshSimplifiers/FastQuadric/FastQuadric.ts","../../src/Geometries/ThreeGeometry.ts","../../src/consts.ts","../../src/Adapters/ThreeAdapter.ts","../src/pages/FQDemo1.ts","../src/pages/FQDemo2.ts","../src/pages/index.ts","../src/index.ts"],"sourcesContent":["import * as THREE from \"three\";\nimport Renderable from \"../types/Renderable\";\n\nclass Renderer {\n  private _threeRenderer: THREE.WebGLRenderer;\n  private _renderingPage: Renderable | null;\n  private _clock: THREE.Clock;\n\n  public get canvas() { return this._threeRenderer.domElement; }\n\n  constructor(selector: string) {\n    const canvas = document.querySelector(selector);\n\n    this._threeRenderer = new THREE.WebGLRenderer({\n      canvas: canvas as HTMLCanvasElement,\n    });\n\n    const renderer = this._threeRenderer;\n    renderer.shadowMap.enabled = true;\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap;\n    renderer.outputEncoding = THREE.sRGBEncoding;\n\n    this._clock = new THREE.Clock(true);\n    this._renderingPage = null;\n  }\n\n  public resize() {\n    const renderer = this._threeRenderer;\n    const canvas = renderer.domElement;\n    const width = canvas.offsetWidth;\n    const height = canvas.offsetHeight;\n\n    renderer.setSize(width, height, false);\n    renderer.setPixelRatio(window.devicePixelRatio);\n  }\n\n  public render(target: Renderable) {\n    const renderer = this._threeRenderer;\n    const description = document.querySelector(\"#page-description\");\n\n    this._renderingPage = target;\n    description!.innerHTML = target.description;\n\n    renderer.setAnimationLoop(() => {\n      const timeSec = this._clock.getDelta();\n\n      target.update(timeSec);\n      renderer.render(target.scene, target.camera);\n    });\n  }\n\n  public stopRender() {\n    this._renderingPage?.destroy();\n    this._threeRenderer.setAnimationLoop(null);\n  }\n}\n\nexport default Renderer;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nclass Vector3 {\n  static addVectors(v1: Vector3, v2: Vector3) {\n    return new Vector3().copy(v1).add(v2);\n  }\n\n  static subVectors(v1: Vector3, v2: Vector3) {\n    return new Vector3().copy(v1).sub(v2);\n  }\n\n  public x: number;\n  public y: number;\n  public z: number;\n\n  constructor(v0: number = 0, v1: number = 0, v2: number = 0) {\n    this.x = v0;\n    this.y = v1;\n    this.z = v2;\n  }\n\n  public copy(other: Vector3) {\n    this.x = other.x;\n    this.y = other.y;\n    this.z = other.z;\n    return this;\n  }\n\n  public add(other: Vector3) {\n    this.x += other.x;\n    this.y += other.y;\n    this.z += other.z;\n    return this;\n  }\n\n  public sub(other: Vector3) {\n    this.x -= other.x;\n    this.y -= other.y;\n    this.z -= other.z;\n    return this;\n  }\n\n  public dot(other: Vector3): number {\n    const { x: x1, y: y1, z: z1 } = this;\n    const { x: x2, y: y2, z: z2 } = other;\n\n    return x1 * x2 + y1 * y2 + z1 * z2;\n  }\n\n  public cross(other: Vector3): this {\n    const { x: x1, y: y1, z: z1 } = this;\n    const { x: x2, y: y2, z: z2 } = other;\n\n    this.x = y1 * z2 - z1 * y2;\n    this.y = z1 * x2 - x1 * z2;\n    this.z = x1 * y2 - y1 * x2;\n    return this;\n  }\n\n  public normalize(): this {\n    const length = this.length();\n\n    if (length > 0) {\n      const invLength = 1 / length;\n      this.x *= invLength;\n      this.y *= invLength;\n      this.z *= invLength;\n    }\n\n    return this;\n  }\n\n  public length(): number {\n    const { x, y, z } = this;\n    return Math.sqrt(x * x + y * y + z * z);\n  }\n\n  public scaleSclar(factor: number): this {\n    this.x *= factor;\n    this.y *= factor;\n    this.z *= factor;\n\n    return this;\n  }\n}\n\nexport default Vector3;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Vector3 from \"~/math/Vector3\";\n\nclass Triangle {\n  public originalIndex: number;\n  public v: [number, number, number];\n  public err: [number, number, number, number];\n  public deleted: boolean;\n  public dirty: boolean;\n  public n: Vector3;\n\n  constructor(idx: number) {\n    this.originalIndex = idx;\n    this.v = [0, 0, 0];\n    this.err = [0, 0, 0, 0];\n    this.deleted = false;\n    this.dirty = false;\n    this.n = new Vector3();\n  }\n}\n\nexport default Triangle;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n// Original code from\n// https://github.com/sp4cerat/Fast-Quadric-Mesh-Simplification/blob/master/src.gl/Simplify.h\n\nclass SymmetricMatrix {\n  static makePlane(a: number, b: number, c: number, d: number): SymmetricMatrix {\n    return new SymmetricMatrix(\n      a * a, a * b, a * c, a * d,\n             b * b, b * c, b * d,\n                    c * c, c * d,\n                           d * d,\n    );\n  }\n\n  public m: number[];\n\n  constructor(\n    m11: number = 0, m12: number = 0, m13: number = 0, m14: number = 0,\n                     m22: number = 0, m23: number = 0, m24: number = 0,\n                                      m33: number = 0, m34: number = 0,\n                                                       m44: number = 0,\n  ) {\n    this.m = new Array(10);\n    this.set(m11, m12, m13, m14, m22, m23, m24, m33, m34, m44);\n  }\n\n  public copy(other: SymmetricMatrix): this {\n    const m = other.m;\n    this.m = m.concat();\n    return this;\n  }\n\n  public set(\n    m11: number, m12: number, m13: number, m14: number,\n                 m22: number, m23: number, m24: number,\n                              m33: number, m34: number,\n                                           m44: number,\n  ) {\n    const m = this.m;\n    m[0] = m11; m[1] = m12; m[2] = m13; m[3] = m14;\n                m[4] = m22; m[5] = m23; m[6] = m24;\n                            m[7] = m33; m[8] = m34;\n                                        m[9] = m44;\n  }\n\n  public det(\n    a11: number, a12: number, a13: number,\n    a21: number, a22: number, a23: number,\n    a31: number, a32: number, a33: number,\n  ): number {\n    const m = this.m;\n    const det = m[a11] * m[a22] * m[a33]\n      + m[a13] * m[a21] * m[a32]\n      + m[a12] * m[a23] * m[a31]\n      - m[a13] * m[a22] * m[a31]\n      - m[a11] * m[a23] * m[a32]\n      - m[a12] * m[a21] * m[a33];\n    return det;\n  }\n\n  public add(other: SymmetricMatrix): this {\n    const m = this.m;\n    const n = other.m;\n    this.set(\n      m[0] + n[0], m[1] + n[1], m[2] + n[2], m[3] + n[3],\n                   m[4] + n[4], m[5] + n[5], m[6] + n[6],\n                                m[7] + n[7], m[8] + n[8],\n                                             m[9] + n[9],\n    );\n\n    return this;\n  }\n}\n\nexport default SymmetricMatrix;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Vector3 from \"~/math/Vector3\";\nimport SymmetricMatrix from \"~/math/SymmetricMatrix\";\n\nclass Vertex {\n  public originalIndex: number;\n  public p: Vector3;\n  public tstart: number;\n  public tcount: number;\n  public q: SymmetricMatrix;\n  public border: boolean;\n\n  constructor(idx: number) {\n    this.originalIndex = idx;\n    this.p = new Vector3();\n    this.tstart = 0;\n    this.tcount = 0;\n    this.q = new SymmetricMatrix();\n    this.border = false;\n  }\n}\n\nexport default Vertex;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nclass Ref {\n  public tid: number;\n  public tvertex: number;\n\n  constructor() {\n    this.tid = 0;\n    this.tvertex = 0;\n  }\n}\n\nexport default Ref;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Vector3 from \"./Vector3\";\n\nclass Face3 {\n  public index: number;\n  public normal: Vector3;\n\n  constructor(\n    public a: number,\n    public b: number,\n    public c: number\n  ) {}\n}\n\nexport default Face3;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nclass Timer {\n  private _diff: number = 0;\n  private _startTime: number | [number, number] | null = null;\n\n  /**\n   * Time diff in miliseconds\n   */\n  public get diff() { return this._diff; }\n\n  public start(): void {\n    if (typeof process !== \"undefined\" && process.hrtime) {\n      // Use high resolution timer in Node\n      this._startTime = process.hrtime();\n    } else {\n      this._startTime = Date.now();\n    }\n  }\n\n  public end(): void {\n    // Not started\n    if (this._startTime == null) return;\n\n    if (typeof process !== \"undefined\" && process.hrtime) {\n      // Use high resolution timer in Node\n      const diff = process.hrtime(this._startTime as [number, number]);\n      const diffInMiliSeconds = 1000 * (diff[0] + diff[1] * 1e-9); // diff[1] is in nanoseconds\n\n      this._diff = diffInMiliSeconds;\n    } else {\n      this._diff = Date.now() - (this._startTime as number);\n    }\n\n    this._startTime = null;\n  }\n}\n\nexport default Timer;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n * Original code: https://github.com/sp4cerat/Fast-Quadric-Mesh-Simplification\n * License: MIT\n */\n\nimport MeshSimplifier from \"../MeshSimplifier\";\nimport Triangle from \"./structs/Triangle\";\nimport Vertex from \"./structs/Vertex\";\nimport Ref from \"./structs/Ref\";\nimport Vector3 from \"~/math/Vector3\";\nimport Face3 from \"~/math/Face3\";\nimport SymmetricMatrix from \"~/math/SymmetricMatrix\";\nimport Adapter from \"~/Adapters/Adapter\";\nimport Geometry from \"~/Geometries/Geometry\";\nimport Timer from \"~/util/Timer\";\n\nclass FastQuadric implements MeshSimplifier {\n  /* Options */\n  public targetPercentage: number;\n  public aggressiveness: number;\n\n  private _triangles: Triangle[];\n  private _vertices: Vertex[];\n  private _refs: Ref[];\n  private _timer: Timer;\n\n  public get timeConsumed() { return this._timer.diff; }\n\n  constructor({\n    targetPercentage = 0.5,\n    aggressiveness = 7\n  } = {}) {\n    this._triangles = [];\n    this._vertices = [];\n    this._refs = [];\n    this.targetPercentage = targetPercentage;\n    this.aggressiveness = aggressiveness;\n    this._timer = new Timer();\n  }\n\n  public simplify(target: Adapter | Geometry): this {\n    const timer = this._timer;\n    timer.start();\n\n    if ((target as Adapter).geometries) {\n      (target as Adapter).geometries.forEach(geometry => {\n        this._process(geometry);\n      });\n    } else {\n      this._process(target as Geometry);\n    }\n\n    timer.end();\n\n    return this;\n  }\n\n  private _process(geometry: Geometry) {\n    this._getData(geometry);\n\n    const triangles = this._triangles;\n    const vertices = this._vertices;\n    const refs = this._refs;\n    const targetPercentage = this.targetPercentage;\n    const aggressiveness = this.aggressiveness;\n\n    const targetCount = this._triangles.length * targetPercentage;\n\n    triangles.forEach(triangle => triangle.deleted = false);\n\n    let deletedTriangles: number = 0;\n    const deleted0: boolean[] = [];\n    const deleted1: boolean[] = [];\n    const triangleCount = triangles.length;\n\n    for (let iteration = 0; iteration < 100; iteration++) {\n      // Break when target number of triangles reached\n      if (triangleCount - deletedTriangles <= targetCount) break;\n\n      // Update mesh once in a while\n\t\t\tif (iteration % 5 === 0) {\n\t\t\t\tthis._updateMesh(iteration);\n      }\n\n      // Clear dirty flag\n      triangles.forEach(triangle => triangle.dirty = false);\n\n      //\n\t\t\t// All triangles with edges below the threshold will be removed\n\t\t\t//\n\t\t\t// The following numbers works well for most models.\n\t\t\t// If it does not, try to adjust the 3 parameters\n      //\n      const threshold = 0.000000001 * Math.pow(iteration + 3, aggressiveness);\n\n      for (let i = triangles.length - 1; i >= 0; i--) {\n        const t = triangles[i];\n        if (t.err[3] > threshold || t.deleted || t.dirty) continue;\n\n        for (let j = 0; j < 3; j++) {\n          if (t.err[j] < threshold) {\n            const i0 = t.v[j];\n            const i1 = t.v[(j + 1) % 3];\n\n            const v0 = vertices[i0];\n            const v1 = vertices[i1];\n\n            // Border check\n            if (v0.border || v1.border) continue;\n\n            // Compute vertex to collapse to\n            const p = new Vector3();\n            this._calculateError(i0, i1, p);\n\n            deleted0.splice(0); // normals temporarily\n            deleted1.splice(0); // normals temporarily\n\n            // Don't remove if flipped\n            if (this._flipped(p, i1, v0, deleted0)) continue;\n            if (this._flipped(p, i0, v1, deleted1)) continue;\n\n            // Not flipped, so remove edge\n            v0.p = p;\n            v0.q.add(v1.q);\n\n            const tstart = refs.length;\n\n            deletedTriangles += this._updateTriangles(i0, v0, deleted0);\n            deletedTriangles += this._updateTriangles(i0, v1, deleted1);\n\n            const tcount = refs.length - tstart;\n\n            v0.tstart = tstart;\n            v0.tcount = tcount;\n            break;\n          }\n        }\n\n        // Done?\n        if (triangleCount - deletedTriangles <= targetCount) break;\n      }\n    }\n\n    this._compactMesh();\n\n    this._setData(geometry);\n  }\n\n  private _getData(geometry: Geometry) {\n    const data = geometry.prepare();\n\n    this._vertices = data.vertices.map((v, idx) => {\n      const vertex = new Vertex(idx);\n      vertex.p.copy(v);\n      return vertex;\n    });\n\n    this._triangles = data.faces.map((f, idx) => {\n      const triangle = new Triangle(idx);\n      triangle.v = [f.a, f.b, f.c];\n      return triangle;\n    });\n\n    this._refs = [];\n  }\n\n  private _setData(geometry: Geometry) {\n    const triangles = this._triangles;\n\n    const vertices = this._vertices.map(vertex => vertex.p);\n    const faces = triangles.map(triangle => {\n      const v = triangle.v;\n      return new Face3(v[0], v[1], v[2]);\n    });\n\n    const unculledVertices = this._vertices.map(v => v.originalIndex);\n    const unculledFaces = this._triangles.map(f => f.originalIndex);\n\n    geometry.update({\n      vertices,\n      faces,\n      unculledVertices,\n      unculledFaces,\n    });\n  }\n\n  private _flipped(p: Vector3, i: number, v: Vertex, deleted: boolean[]): boolean {\n    const triangles = this._triangles;\n    const vertices = this._vertices;\n    const refs = this._refs;\n\n    for (let k = 0; k < v.tcount; k++) {\n      const ref = refs[v.tstart + k];\n      const t = triangles[ref.tid];\n      if (t.deleted) continue;\n\n      const s = ref.tvertex;\n      const id1 = t.v[(s + 1) % 3];\n      const id2 = t.v[(s + 2) % 3];\n\n      if (id1 === i || id2 === i) {\n        deleted[k] = true;\n        continue;\n      }\n\n      const d1 = Vector3.subVectors(vertices[id1].p, p);\n      const d2 = Vector3.subVectors(vertices[id2].p, p);\n      d1.normalize();\n      d2.normalize();\n\n      if (Math.abs(d1.dot(d2)) > 0.999) return true;\n\n      const n = new Vector3().copy(d1).cross(d2);\n      n.normalize();\n      deleted[k] = false;\n      if (n.dot(t.n) < 0.2) return true;\n    }\n    return false;\n  }\n\n  private _updateTriangles(i: number, v: Vertex, deleted: boolean[]): number {\n    const triangles = this._triangles;\n    const refs = this._refs;\n    const p = new Vector3();\n\n    let deletedCount = 0;\n    for (let k = 0; k < v.tcount; k++) {\n      const r = refs[v.tstart + k];\n      const t = triangles[r.tid];\n\n      if (t.deleted) continue;\n      if (deleted[k]) {\n        t.deleted = true;\n        deletedCount++;\n        continue;\n      }\n\n      t.v[r.tvertex] = i;\n      t.dirty = true;\n      t.err[0] = this._calculateError(t.v[0], t.v[1], p);\n      t.err[1] = this._calculateError(t.v[1], t.v[2], p);\n      t.err[2] = this._calculateError(t.v[2], t.v[0], p);\n      t.err[3] = Math.min(t.err[0], t.err[1], t.err[2]);\n      refs.push(r);\n    }\n\n    return deletedCount;\n  }\n\n  private _updateMesh(iteration: number) {\n    const vertices = this._vertices;\n    const refs = this._refs;\n\n\t\tif (iteration > 0) {\n      // compact triangles\n      this._triangles = this._triangles.filter(triangle => !triangle.deleted);\n\t\t} else {\n      //\n      // Init Quadrics by Plane & Edge Errors\n      //\n      // required at the beginning ( iteration == 0 )\n      // recomputing during the simplification is not required,\n      // but mostly improves the result for closed meshes\n      //\n      vertices.forEach(vertex => vertex.q = new SymmetricMatrix());\n\n      this._triangles.forEach(t => {\n        const p = t.v.map(v => vertices[v].p);\n        const n = Vector3.subVectors(p[1], p[0])\n          .cross(Vector3.subVectors(p[2], p[0]))\n          .normalize();\n\n        t.n = n;\n        const tmp = SymmetricMatrix.makePlane(n.x, n.y, n.z, -n.dot(p[0]));\n\n        t.v.forEach(v => vertices[v].q.add(tmp));\n      });\n\n      this._triangles.forEach(t => {\n        const p = new Vector3();\n        t.v.forEach((v, i) => {\n          t.err[i] = this._calculateError(v, t.v[(i + 1) % 3], p);\n        });\n      });\n    }\n\n    // Init Reference ID list\n    vertices.forEach(vertex => {\n      vertex.tstart = 0;\n      vertex.tcount = 0;\n    });\n\n    const triangles = this._triangles;\n    triangles.forEach(triangle => {\n      triangle.v.forEach(v => vertices[v].tcount++);\n    });\n\n    let tstart = 0;\n    vertices.forEach(v => {\n      v.tstart = tstart;\n      tstart += v.tcount;\n      v.tcount = 0;\n    });\n\n    // Write References\n    for (let i = refs.length; i < triangles.length * 3; i++) {\n\t\t\trefs[i] = new Ref();\n\t\t}\n\n    triangles.forEach((t, i) => {\n      for (let j = 0; j < 3; j++) {\n        const v = vertices[t.v[j]];\n        refs[v.tstart + v.tcount].tid = i;\n        refs[v.tstart + v.tcount].tvertex = j;\n        v.tcount++;\n      };\n    });\n\n\t\t// Identify boundary : vertices[].border=0,1\n\t\tif (iteration === 0) {\n      vertices.forEach(vertex => vertex.border = false);\n      vertices.forEach(v => {\n        // clear\n        const vcount: number[] = [];\n        const vids: number[] = [];\n\n        for (let i = 0; i < v.tcount; i++) {\n          const k = refs[v.tstart + i].tid;\n          const t = triangles[k];\n\n          for (let j = 0; j < 3; j++) {\n            const id = t.v[j];\n            let ofs = 0;\n\n            while (ofs < vcount.length) {\n              if (vids[ofs] === id) break;\n              ofs++;\n            }\n\n            if (ofs === vcount.length) {\n              vcount.push(1);\n              vids.push(id);\n            } else {\n              vcount[ofs]++;\n            }\n          };\n        }\n\n        for (let j = 0; j < vcount.length; j++) {\n          if (vcount[j] === 1) {\n            vertices[vids[j]].border = true;\n          }\n        };\n      });\n\t\t}\n  }\n\n  // Error for one edge\n  private _calculateError(idV1: number, idV2: number, result: Vector3) {\n    // Compute interpolated vertex\n    const vertices = this._vertices;\n    const v1 = vertices[idV1];\n    const v2 = vertices[idV2];\n    const q = new SymmetricMatrix().copy(v1.q).add(v2.q);\n    const border = v1.border && v2.border;\n    const det = q.det(0, 1, 2, 1, 4, 5, 2, 5, 7);\n\n    let error: number = 0;\n\n    if (det !== 0 && !border) {\n      // q_delta is invertible\n      result.x = -1 / det * (q.det(1, 2, 3, 4, 5, 6, 5, 7, 8)); // vx = A41/det(q_delta)\n      result.y =  1 / det * (q.det(0, 2, 3, 1, 5, 6, 2, 7, 8)); // vy = A42/det(q_delta)\n      result.z = -1 / det * (q.det(0, 1, 3, 1, 4, 6, 2, 5, 8)); // vz = A43/det(q_delta)\n      error = this._vertexError(q, result);\n    } else {\n      const p1 = v1.p;\n      const p2 = v2.p;\n      const p3 = new Vector3(\n        (p1.x + p2.x) * 0.5,\n        (p1.y + p2.y) * 0.5,\n        (p1.z + p2.z) * 0.5,\n      );\n\n      const error1 = this._vertexError(q, p1);\n      const error2 = this._vertexError(q, p2);\n      const error3 = this._vertexError(q, p3);\n      error = Math.min(error1, error2, error3);\n\n      if (error1 === error) result.copy(p1);\n      if (error2 === error) result.copy(p2);\n      if (error3 === error) result.copy(p3);\n    }\n\n    return error;\n  }\n\n  private _vertexError(q: SymmetricMatrix, v: Vector3): number {\n    const {x, y, z} = v;\n    const m = q.m;\n\n    const err = m[0] * x * x\n      + 2 * m[1] * x * y\n      + 2 * m[2] * x * z\n      + 2 * m[3] * x\n      +     m[4] * y * y\n      + 2 * m[5] * y * z\n      + 2 * m[6] * y\n      +     m[7] * z * z\n      + 2 * m[8] * z\n      +     m[9];\n\n    return err;\n  }\n\n  private _compactMesh() {\n    this._triangles = this._triangles.filter(t => !t.deleted);\n\n    const triangles = this._triangles;\n    const vertices = this._vertices;\n\n    vertices.forEach(vertex => vertex.tcount = 0);\n    triangles.forEach(triangle => {\n      triangle.v.forEach(v => {\n        vertices[v].tcount = 1;\n      });\n    });\n\n    let dst = 0;\n    vertices.forEach(vertex => {\n      if (vertex.tcount > 0) {\n        vertex.tstart = dst;\n        vertices[dst].originalIndex = vertex.originalIndex;\n        vertices[dst].p = vertex.p;\n        dst++;\n      }\n    });\n\n    triangles.forEach(t => {\n      t.v.forEach((v, i) => {\n        t.v[i] = vertices[v].tstart;\n      });\n    });\n\n    vertices.splice(dst); // resize\n  }\n}\n\nexport default FastQuadric;\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport * as THREE from \"three\";\nimport Geometry from \"./Geometry\";\nimport Vector3 from \"~/math/Vector3\";\nimport Face3 from \"~/math/Face3\";\n\n// TODO: Support line geometry\n\n/**\n * Adapter class for three.js geometry\n * @example\n * import * as THREE from \"three\";\n * import { FastQuadric, ThreeGeometry } from \"mesh-simplifier\";\n *\n * const geometry = new THREE.TorusKnotGeometry(10);\n * const adaptedGeometry = new ThreeGeometry(geometry);\n *\n * const simplifier = new FastQuadric();\n * simplifier.simplify(adaptedGeometry);\n *\n * // Now do whatever you want with simplified geometry\n * const material = new THREE.MeshBasicMaterial();\n * const mesh = new THREE.Mesh(adaptedGeometry.simplified, material);\n */\nclass ThreeGeometry implements Geometry {\n  public originalGeometry: THREE.Geometry | THREE.BufferGeometry;\n  private _processingGeometry: THREE.Geometry;\n  private _isBufferGeometry: boolean;\n\n  constructor(geometry: THREE.Geometry | THREE.BufferGeometry) {\n    this._isBufferGeometry = (geometry as THREE.BufferGeometry).isBufferGeometry;\n    this.originalGeometry = geometry;\n\n    if (this._isBufferGeometry) {\n      this._processingGeometry = new THREE.Geometry().fromBufferGeometry(geometry as THREE.BufferGeometry);\n    } else {\n      this._processingGeometry = this.originalGeometry as THREE.Geometry;\n    }\n  }\n\n  public prepare() {\n    const geometry = this._processingGeometry;\n    geometry.mergeVertices();\n\n    return {\n      vertices: geometry.vertices.map(vec => new Vector3(vec.x, vec.y, vec.z)),\n      faces: geometry.faces.map(face => new Face3(face.a, face.b, face.c)),\n    }\n  }\n\n  public update(datas: {\n    vertices: Vector3[],\n    faces: Face3[],\n    unculledVertices: number[],\n    unculledFaces: number[],\n  }): this {\n    const { vertices, faces, unculledVertices, unculledFaces } = datas\n\n    const geometry = this._processingGeometry;\n    const faceVertexUVs = geometry.faceVertexUvs;\n    const hasUV = faceVertexUVs[0] && faceVertexUVs[0].length > 0;\n    const hasUV2 = faceVertexUVs[1] && faceVertexUVs[1].length > 0;\n\n    geometry.vertices = vertices.map(vertex => new THREE.Vector3(vertex.x, vertex.y, vertex.z));\n    geometry.faces = faces.map(face => new THREE.Face3(face.a, face.b, face.c));\n\n    if (hasUV) {\n      geometry.faceVertexUvs[0] = unculledFaces.map(faceIdx => {\n        return geometry.faceVertexUvs[0][faceIdx];\n      });\n    }\n    if (hasUV2) {\n      geometry.faceVertexUvs[1] = unculledFaces.map(faceIdx => {\n        return geometry.faceVertexUvs[1][faceIdx];\n      });\n    }\n\n    geometry.computeFaceNormals();\n\n    if (this._isBufferGeometry) {\n      const origGeo = this.originalGeometry as THREE.BufferGeometry;\n\n      const bufferGeo = new THREE.BufferGeometry().fromGeometry(geometry);\n      const hasColor = origGeo.attributes.color && origGeo.attributes.color.count > 0;\n      const hasTangent = origGeo.attributes.tangent && origGeo.attributes.tangent.count > 0;\n\n      if (!hasColor) bufferGeo.deleteAttribute(\"color\");\n      if (hasTangent && hasUV) {\n        const tangents = new Float32Array(faces.length * 12);\n\n        faces.forEach((face, faceIdx) => {\n          const faceVertices = [face.a, face.b, face.c].map(idx => geometry.vertices[idx]);\n          const faceUVs = faceVertexUVs[0][faceIdx];\n\n          const dPos0 = new THREE.Vector3().subVectors(faceVertices[1], faceVertices[0]);\n          const dPos1 = new THREE.Vector3().subVectors(faceVertices[2], faceVertices[0]);\n\n          const dUV0 = new THREE.Vector2().subVectors(faceUVs[1], faceUVs[0]);\n          const dUV1 = new THREE.Vector2().subVectors(faceUVs[2], faceUVs[0]);\n\n          const r = 1 / (dUV0.x * dUV1.y - dUV0.y * dUV1.x);\n          const tangent = dPos0.multiplyScalar(dUV1.y).sub(dPos1.multiplyScalar(dUV0.y)).multiplyScalar(r).normalize();\n\n          const faceOffset = faceIdx * 12;\n\n          [0, 1, 2].forEach(vIdx => {\n            const vertexOffset = faceOffset + vIdx * 4;\n            tangents[vertexOffset + 0] = tangent.x;\n            tangents[vertexOffset + 1] = tangent.y;\n            tangents[vertexOffset + 2] = tangent.z;\n            tangents[vertexOffset + 3] = 1;\n          });\n        });\n\n        bufferGeo.setAttribute(\"tangent\", new THREE.BufferAttribute(tangents, 4));\n      }\n\n      origGeo.copy(bufferGeo);\n    } else {\n      geometry.verticesNeedUpdate = true;\n      geometry.elementsNeedUpdate = true;\n      geometry.uvsNeedUpdate = true;\n    }\n\n    return this;\n  }\n}\n\nexport default ThreeGeometry;\n","export const THREE_STANDARD_MAPS = [\n  \"alphaMap\",\n  \"aoMap\",\n  \"bumpMap\",\n  \"displacementMap\",\n  \"emissiveMap\",\n  \"envMap\",\n  \"lightMap\",\n  \"map\",\n  \"metalnessMap\",\n  \"normalMap\",\n  // \"roughnessMap\", excluded on purpose\n];\n","/*\n * Copyright (c) 2020 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport * as THREE from \"three\";\nimport Adapter from \"./Adapter\";\nimport ThreeGeometry from \"~/Geometries/ThreeGeometry\";\nimport { THREE_STANDARD_MAPS } from \"~/consts\";\n\nclass ThreeAdapter<OBJ extends THREE.Object3D> implements Adapter {\n  public object: OBJ;\n\n  constructor(original: OBJ, clone: boolean = false) {\n    this.object = clone\n      ? original.clone()\n      : original;\n\n    if (clone) {\n      this._cloneMeshes(original);\n    }\n  }\n\n  public get geometries() {\n    const geometries: ThreeGeometry[] = [];\n    this.object.traverse(obj => {\n      if ((obj as THREE.Mesh).isMesh) {\n        const mesh = obj as THREE.Mesh;\n        const threeGeometry = new ThreeGeometry(mesh.geometry);\n\n        geometries.push(threeGeometry);\n      }\n    });\n\n    return geometries;\n  }\n\n  private _cloneMeshes(original: OBJ) {\n    const origMeshes: THREE.Mesh[] = [];\n    const clonedMeshes: THREE.Mesh[] = [];\n\n    original.traverse(obj => {\n      if ((obj as THREE.Mesh).isMesh) origMeshes.push(obj as THREE.Mesh);\n    });\n    this.object.traverse(obj => {\n      if ((obj as THREE.Mesh).isMesh) clonedMeshes.push(obj as THREE.Mesh);\n    });\n\n    clonedMeshes.forEach((mesh, meshIdx) => {\n      const origMesh = origMeshes[meshIdx];\n\n      mesh.geometry = mesh.geometry.clone();\n      mesh.material = Array.isArray(mesh.material)\n        ? mesh.material.map(mat => this._cloneMaterial(mat))\n        : this._cloneMaterial(mesh.material);\n\n      if ((mesh as THREE.SkinnedMesh).isSkinnedMesh) {\n        this._skinnedMeshToMesh(\n          mesh as THREE.SkinnedMesh,\n          (origMesh as THREE.SkinnedMesh).skeleton\n        );\n      }\n    });\n  }\n\n  private _cloneMaterial(mat: THREE.Material) {\n    const clonedMat = mat.clone();\n\n    if (mat.type === \"MeshStandardMaterial\") {\n      const standardMat = mat as THREE.MeshStandardMaterial;\n      THREE_STANDARD_MAPS.forEach(mapName => {\n        if (standardMat[mapName] == null) return;\n\n        const prevMat = standardMat[mapName];\n        standardMat[mapName] = standardMat[mapName].clone();\n        standardMat[mapName].needsUpdate = true;\n\n        if (mapName === \"metalnessMap\" && prevMat === standardMat.roughnessMap) {\n          standardMat.roughnessMap = standardMat.metalnessMap;\n        }\n      });\n    } else {\n      for (const property in clonedMat) {\n        if (clonedMat[property] && clonedMat[property].isTexture) {\n          clonedMat[property] = clonedMat[property].clone();\n          clonedMat[property].needsUpdate = true;\n        }\n      }\n    }\n\n    clonedMat.needsUpdate = true;\n    return clonedMat;\n  }\n\n  private _skinnedMeshToMesh(skinnedMesh: THREE.SkinnedMesh, skeleton: THREE.Skeleton) {\n    const geometry = skinnedMesh.geometry as THREE.BufferGeometry;\n    const positions = geometry.attributes.position;\n    const skinIndicies = geometry.attributes.skinIndex;\n    const skinWeights = geometry.attributes.skinWeight;\n\n    skinnedMesh.updateMatrixWorld();\n    skeleton.update();\n\n    const boneMatricies = skeleton.boneMatrices;\n    const finalMatrix = new THREE.Matrix4();\n    for (let posIdx = 0; posIdx < positions.count; posIdx++) {\n      finalMatrix.identity();\n\n      const skinned = new THREE.Vector4();\n      skinned.set(0, 0, 0, 0);\n      const skinVertex = new THREE.Vector4();\n      skinVertex.set(\n        positions.getX(posIdx),\n        positions.getY(posIdx),\n        positions.getZ(posIdx),\n        1,\n      ).applyMatrix4(skinnedMesh.bindMatrix);\n\n      const weights = [\n        skinWeights.getX(posIdx),\n        skinWeights.getY(posIdx),\n        skinWeights.getZ(posIdx),\n        skinWeights.getW(posIdx),\n      ];\n\n      const indicies = [\n        skinIndicies.getX(posIdx),\n        skinIndicies.getY(posIdx),\n        skinIndicies.getZ(posIdx),\n        skinIndicies.getW(posIdx),\n      ];\n\n      weights.forEach((weight, index) => {\n        const boneMatrix = new THREE.Matrix4().fromArray(boneMatricies, indicies[index] * 16).multiplyScalar(weight);\n        skinned.add(skinVertex.clone().applyMatrix4(boneMatrix));\n      });\n\n      const transformed = skinned.applyMatrix4(skinnedMesh.bindMatrixInverse);\n\n      positions.setXYZ(posIdx, transformed.x, transformed.y, transformed.z);\n    }\n\n    const parent = skinnedMesh.parent!;\n    const mesh = new THREE.Mesh(skinnedMesh.geometry, skinnedMesh.material).copy(skinnedMesh);\n\n    (mesh.geometry as THREE.BufferGeometry).deleteAttribute(\"skinIndex\");\n    (mesh.geometry as THREE.BufferGeometry).deleteAttribute(\"skinWeight\");\n\n    parent.remove(skinnedMesh);\n    parent.add(mesh);\n  }\n}\n\nexport default ThreeAdapter;\n","import * as THREE from \"three\";\nimport Renderable from \"../types/Renderable\";\nimport { FastQuadric, ThreeGeometry } from \"../../../src/index\";\n\n// FastQuadric Test page\nclass FQDemo1 implements Renderable {\n  public name = \"Fast Quadric\";\n  public description = \"\";\n  public scene: THREE.Scene;\n  public camera: THREE.PerspectiveCamera;\n\n  private _origMesh: THREE.Mesh;\n  private _simpMesh: THREE.Mesh;\n\n  public update(timeSec): void {\n    // this._origMesh.rotateY(timeSec);\n    // this._simpMesh.rotateY(timeSec);\n  }\n\n  public onLoad() {\n    this.scene = new THREE.Scene();\n    this.camera = new THREE.PerspectiveCamera();\n\n    this.camera.near = 1;\n    this.camera.far = 100;\n    this.camera.position.set(0, 0, 100);\n\n    this._setupScene();\n  }\n\n  public destroy() {\n    this._origMesh.geometry.dispose();\n    this._simpMesh.geometry.dispose();\n  }\n\n  private _setupScene() {\n    const scene = this.scene;\n    const originalMaterial = new THREE.MeshBasicMaterial({ color: 0xffffff, wireframe: true });\n    const simplifiedMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000, wireframe: true });\n\n    const originalGeometry = new THREE.TorusKnotGeometry(10, 3, 250, 20, 1, 20);\n    const simplifiedGeometry = originalGeometry.clone();\n    const adaptedGeometry = new ThreeGeometry(simplifiedGeometry);\n    const simplifier = new FastQuadric();\n\n    simplifier.simplify(adaptedGeometry);\n\n    const originalMesh = new THREE.Mesh(originalGeometry, originalMaterial);\n    originalMesh.position.set(-20, 0, 0);\n\n    const simplifiedMesh = new THREE.Mesh(simplifiedGeometry, simplifiedMaterial);\n    simplifiedMesh.position.set(20, 0, 0);\n\n    scene.add(originalMesh);\n    scene.add(simplifiedMesh);\n\n    this._origMesh = originalMesh;\n    this._simpMesh = simplifiedMesh;\n  }\n}\n\nexport default FQDemo1;\n","import * as THREE from \"three\";\nimport helvetiker from \"three/examples/fonts/helvetiker_regular.typeface.json\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport Renderable from \"../types/Renderable\";\nimport { FastQuadric, ThreeAdapter } from \"../../../src/index\";\nimport OnLoadContext from \"../types/OnLoadContext\";\n\n// FastQuadric Test page\nclass FQDemo2 implements Renderable {\n  public name = \"Fast Quadric - textured\";\n  public description = \"3D Model: <a href=\\\"https://sketchfab.com/3d-models/closet-of-young-warrior-0698dad7bd1547e38ecd8e0d8080e329\\\">Closet of Young Warrior</a> by <a href=\\\"https://sketchfab.com/PatriciaDobbins\\\">PatriciaDobbins</a>(CC BY 4.0)\"\n  public scene: THREE.Scene;\n  public camera: THREE.PerspectiveCamera;\n\n  private _controls: OrbitControls;\n  private _origScene: THREE.Group;\n  private _simpScene: THREE.Group;\n\n  public update(timeSec): void {\n    // this._origMesh.rotateY(timeSec);\n    // this._simpMesh.rotateY(timeSec);\n  }\n\n  public onLoad(context: OnLoadContext) {\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(\"#C3DFCB\");\n\n    this.camera = new THREE.PerspectiveCamera();\n    this.camera.position.set(0, 0, 15);\n    this.camera.lookAt(0, 0, 0);\n\n    this._controls = new OrbitControls(this.camera, context.canvas);\n\n    this._setupScene();\n  }\n\n  public destroy() {}\n\n  private _setupScene() {\n    this.scene.add(new THREE.AmbientLight(0xffffff, .5));\n\n    const directional = new THREE.DirectionalLight(0xffffff, 2);\n    directional.castShadow = true;\n    directional.shadow.mapSize.set(4096, 4096);\n    directional.shadow.bias = -0.0001;\n    directional.shadow.camera.left = -10;\n    directional.shadow.camera.right = 10;\n    directional.shadow.camera.top = 10;\n    directional.shadow.camera.left = -10;\n    directional.position.set(0, 4, 3);\n    this.scene.add(directional);\n\n    const directional2 = new THREE.DirectionalLight(0x5555ff, 2);\n    directional2.position.set(4, 5, -3);\n    this.scene.add(directional2);\n\n    new GLTFLoader().load(\"./assets/closet_of_young_warrior/scene.gltf\", gltf => {\n      this._origScene = gltf.scene;\n\n      const origMeshes: THREE.Mesh[] = [];\n\n      gltf.scene.traverse(obj => {\n        if ((obj as any).isMesh) {\n          const mesh = obj as THREE.Mesh;\n          mesh.castShadow = true;\n          mesh.receiveShadow = true;\n\n          const materials = Array.isArray(mesh.material)\n            ? mesh.material\n            : [mesh.material];\n\n          materials.forEach((mat: THREE.MeshStandardMaterial) => {\n            if (mat.map) {\n              mat.map.encoding = THREE.sRGBEncoding;\n            }\n            if (mat.metalnessMap) {\n              mat.metalnessMap.encoding = THREE.sRGBEncoding;\n            }\n            if (mat.roughnessMap) {\n              mat.roughnessMap.encoding = THREE.sRGBEncoding;\n            }\n          });\n          origMeshes.push(mesh);\n        }\n      });\n\n      this._simpScene = this._origScene.clone(true);\n\n      const bbox = new THREE.Box3().setFromObject(gltf.scene);\n      this._origScene.position.sub(bbox.getCenter(new THREE.Vector3()));\n      this._simpScene.position.copy(this._origScene.position);\n\n      const simplifier = new FastQuadric({ targetPercentage: 0.5 });\n      const adaptedScene = new ThreeAdapter(this._simpScene);\n\n      this._origScene.position.sub(new THREE.Vector3(3, 0, 0));\n      this._simpScene.position.add(new THREE.Vector3(3, 0, 0));\n\n      simplifier.simplify(adaptedScene);\n\n      this.scene.add(this._origScene);\n      this.scene.add(this._simpScene);\n\n      const cloned1 = this._origScene.clone(true);\n      const cloned2 = this._simpScene.clone(true);\n\n      cloned1.traverse(obj => {\n        if ((obj as any).isMesh) {\n          const mesh = obj as THREE.Mesh;\n          mesh.material = new THREE.MeshStandardMaterial({ wireframe: true });\n        }\n      });\n      cloned2.traverse(obj => {\n        if ((obj as any).isMesh) {\n          const mesh = obj as THREE.Mesh;\n          mesh.material = new THREE.MeshStandardMaterial({ wireframe: true });\n        }\n      });\n\n      this.scene.add(cloned1);\n      this.scene.add(cloned2);\n\n      const font = new THREE.FontLoader().parse(helvetiker);\n      const textMat = new THREE.MeshPhongMaterial({ flatShading: true });\n      const text1 = new THREE.Mesh(new THREE.TextGeometry(\"original\", { font, size: 1, height: 0.1 }), textMat);\n      const text2 = new THREE.Mesh(new THREE.TextGeometry(\"simplified\", { font, size: 1, height: 0.1 }), textMat);\n\n      text1.position.set(-5.3, -5, 0);\n      text2.position.set(0.2, -5, 0);\n\n      this.scene.add(text1);\n      this.scene.add(text2);\n    });\n  }\n}\n\nexport default FQDemo2;\n","import FQDemo1 from \"./FQDemo1\";\nimport FQDemo2 from \"./FQDemo2\";\n\nexport default {\n  fq1: FQDemo1,\n  fq2: FQDemo2,\n}\n","import Renderer from \"./components/Renderer\";\nimport PAGES from \"./pages\";\nimport FQDemo1 from \"./pages/FQDemo1\";\nimport Renderable from \"./types/Renderable\";\n\nclass App {\n  private _renderer: Renderer;\n  private _pages: Map<string, Renderable>;\n\n  constructor() {\n    this._renderer = new Renderer(\"#app\");\n    this._pages = new Map();\n\n    this.displayPages();\n    this.resize();\n\n    window.addEventListener(\"resize\", this.resize);\n    window.addEventListener(\"hashchange\", this._hashchange);\n\n    this._loadPageByHash(window.location.hash);\n  }\n\n  public load(page: Renderable) {\n    const renderer = this._renderer;\n    page.onLoad({\n      canvas: renderer.canvas,\n      renderer,\n    });\n    renderer.stopRender();\n    renderer.render(page);\n  }\n\n  public resize = () => {\n    this._renderer.resize();\n  }\n\n  public displayPages() {\n    const pageSelector = document.querySelector(\"#page-selector\")!;\n\n    Object.keys(PAGES).forEach(pageHash => {\n      const page = new PAGES[pageHash]() as Renderable;\n      const pageEl = document.createElement(\"div\");\n\n      this._pages.set(pageHash, page);\n\n      pageEl.classList.add(\"page\");\n      pageEl.innerHTML = `<a href=\"#${pageHash}\">${page.name}</a>`\n\n      pageSelector.appendChild(pageEl);\n    });\n  }\n\n  private _hashchange = (e: HashChangeEvent) => {\n    const currentHash = window.location.hash;\n\n    this._loadPageByHash(currentHash);\n  }\n\n  private _loadPageByHash(hash: string) {\n    const pages = this._pages;\n\n    // remove starting #\n    hash = hash.substr(1);\n\n    const page = pages.has(hash)\n      ? pages.get(hash)!\n      : new FQDemo1(); // Default page\n\n    this.load(page);\n  }\n}\n\nexport default App;\n\n"],"names":["selector","canvas","document","querySelector","_threeRenderer","THREE","renderer","shadowMap","enabled","type","outputEncoding","_clock","_renderingPage","Object","domElement","width","offsetWidth","height","offsetHeight","setSize","setPixelRatio","window","devicePixelRatio","target","description","innerHTML","setAnimationLoop","timeSec","_this","getDelta","update","render","scene","camera","destroy","v0","v1","v2","x","y","z","Vector3","copy","add","sub","other","_a","x1","y1","z1","x2","y2","z2","length","invLength","Math","sqrt","factor","idx","originalIndex","v","err","deleted","dirty","n","m11","m12","m13","m14","m22","m23","m24","m33","m34","m44","m","Array","set","SymmetricMatrix","a","b","c","d","concat","a11","a12","a13","a21","a22","a23","a31","a32","a33","det","p","tstart","tcount","q","border","tid","tvertex","_diff","process","hrtime","_startTime","Date","now","diff","diffInMiliSeconds","_b","_c","targetPercentage","_d","aggressiveness","_triangles","_vertices","_refs","_timer","Timer","timer","start","geometries","forEach","geometry","_process","end","_getData","triangles","vertices","refs","targetCount","triangle","deletedTriangles","deleted0","deleted1","triangleCount","iteration","_updateMesh","threshold","pow","i","t","j","i0","i1","_calculateError","splice","_flipped","_updateTriangles","_compactMesh","_setData","data","prepare","map","vertex","Vertex","faces","f","Triangle","Face3","unculledVertices","unculledFaces","k","ref","s","id1","id2","d1","subVectors","d2","normalize","abs","dot","cross","deletedCount","r","min","push","filter","tmp","makePlane","Ref","vcount","vids","id","ofs","idV1","idV2","result","error","_vertexError","p1","p2","p3","error1","error2","error3","dst","_isBufferGeometry","isBufferGeometry","originalGeometry","_processingGeometry","fromBufferGeometry","mergeVertices","vec","face","datas","faceVertexUVs","faceVertexUvs","hasUV","hasUV2","faceIdx","computeFaceNormals","origGeo","bufferGeo","fromGeometry","hasColor","attributes","color","count","hasTangent","tangent","deleteAttribute","tangents_1","Float32Array","faceVertices","faceUVs","dPos0","dPos1","dUV0","dUV1","multiplyScalar","faceOffset","vIdx","vertexOffset","setAttribute","verticesNeedUpdate","elementsNeedUpdate","uvsNeedUpdate","THREE_STANDARD_MAPS","original","clone","object","_cloneMeshes","traverse","obj","isMesh","mesh","threeGeometry","ThreeGeometry","origMeshes","clonedMeshes","meshIdx","origMesh","material","isArray","mat","_cloneMaterial","isSkinnedMesh","_skinnedMeshToMesh","skeleton","clonedMat","standardMat_1","mapName","prevMat","needsUpdate","roughnessMap","metalnessMap","property","isTexture","skinnedMesh","positions","position","skinIndicies","skinIndex","skinWeights","skinWeight","updateMatrixWorld","boneMatricies","boneMatrices","finalMatrix","posIdx","identity","skinned","skinVertex","getX","getY","getZ","applyMatrix4","bindMatrix","weights","getW","indicies","weight","index","boneMatrix","fromArray","transformed","bindMatrixInverse","setXYZ","parent","remove","near","far","_setupScene","_origMesh","dispose","_simpMesh","originalMaterial","wireframe","simplifiedMaterial","simplifiedGeometry","adaptedGeometry","simplifier","FastQuadric","simplify","originalMesh","simplifiedMesh","context","background","lookAt","_controls","OrbitControls","directional","castShadow","shadow","mapSize","bias","left","right","top","directional2","GLTFLoader","load","gltf","_origScene","receiveShadow","materials","encoding","_simpScene","bbox","setFromObject","getCenter","adaptedScene","ThreeAdapter","cloned1","cloned2","font","parse","helvetiker","textMat","flatShading","text1","size","text2","fq1","FQDemo1","fq2","FQDemo2","_renderer","resize","e","currentHash","location","hash","_loadPageByHash","Renderer","_pages","Map","displayPages","addEventListener","_hashchange","page","onLoad","stopRender","pageSelector","keys","PAGES","pageHash","pageEl","createElement","classList","name","appendChild","pages","substr","has","get"],"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"}